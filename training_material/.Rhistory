# Print the plot
print(p)
tp_model <-
'model {
y ~ dbin(ap,n)
ap <- tp*Se + (1-tp)*(1-Sp)
# Uniform (non-informative) prior distribution
tp ~ dbeta(1,1)
# Informative priors for Se and Sp
Se ~ dbeta(25.4, 3.4)
Sp ~ dbeta(95, 5)
#data# n, y
#monitor# tp, Se, Sp
#inits# tp, Se, Sp
}
'
curve(dbeta(x,25.4, 3.4))
tp_model <-
'model {
y ~ dbin(ap,n)
ap <- tp*Se + (1-tp)*(1-Sp)
# Uniform (non-informative) prior distribution
tp ~ dbeta(1,1)
# Informative priors for Se and Sp
Se ~ dbeta(1, 1)
Sp ~ dbeta(1, 1)
#data# n, y
#monitor# tp, Se, Sp
#inits# tp, Se, Sp
}
'
library(runjags)
# Provide Data
n = 4072
y = 1210
# Initial values for pars of interest
tp <- list(chain1=0.05, chain2=0.95)
Se <- list(chain1=0.05, chain2=0.95)
Sp <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(tp_model, n.chains=2,
burnin=5000, sample=10000)
# Print results
summary(results)
## View results
# Plot results
plot(results) # Click backwards to view all plots
tp_model <-
'model {
y ~ dbin(ap,n)
ap <- tp*Se + (1-tp)*(1-Sp)
# Uniform (non-informative) prior distribution
tp ~ dbeta(1,1)
# Informative priors for Se and Sp
Se ~ dbeta(25.4, 3.4)
Sp ~ dbeta(95, 5)
#data# n, y
#monitor# tp, Se, Sp
#inits# tp, Se, Sp
}
'
library(runjags)
# Provide Data
n = 40
y = 12
# Initial values for pars of interest
tp <- list(chain1=0.05, chain2=0.95)
Se <- list(chain1=0.05, chain2=0.95)
Sp <- list(chain1=0.05, chain2=0.95)
results <- run.jags(tp_model, n.chains=2,
burnin=5000, sample=10000)
# Print results
summary(results)
library("tidyverse")
library("runjags")
library("rjags")
runjags.options(silent.jags=TRUE, silent.runjags=TRUE)
set.seed(2024-04-22)
# Reduce the width of R code output for PDF only:
if(params$presentation){
knitr::knit_hooks$set(size = function(before, options, envir) {
if(before){
knitr::asis_output(paste0("\\", options$size))
}else{
knitr::asis_output("\\normalsize")
}
})
knitr::opts_chunk$set(size = "scriptsize")
}
# Collapse successive chunks:
space_collapse <- function(x){ gsub("```\n*```r*\n*", "", x) }
# Reduce space between chunks:
space_reduce <- function(x){ gsub("```\n+```\n", "", x) }
knitr::knit_hooks$set(document = space_collapse)
# To collect temporary filenames:
cleanup <- character(0)
hw_definition <- c("model{
Population_1 ~ dmulti(prob_1, N_1)
Population_2 ~ dmulti(prob_2, N_2)
#Population_1
# Test1+ Test2+
prob_1[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_1[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_1[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_1[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[2] * ((se[1])*(se[2]))) + ((1-prev[2]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[2] * ((se[1])*(1-se[2]))) + ((1-prev[2]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[2] * ((1-se[1])*(se[2]))) + ((1-prev[2]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[2] * ((1-se[1])*(1-se[2]))) + ((1-prev[2]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
prev[2] ~ dbeta(1, 1)
#se[1] ~ dbeta(1, 1)I(1-sp[1], )
#sp[1] ~ dbeta(1, 1)
se[1] <- 1
sp[1] <-1
se[2] ~ dbeta(1, 1)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_1, Population_2, N_1, N_2
#monitor# prev, prob_1, prob_2, se, sp
#inits# prev, se, sp
}
")
library('runjags')
Population_1 <- as.numeric(pop_1[1:2,1:2])
pop_1 = matrix(nrow=3,ncol=3)
rownames(pop_1) = c("Mantoux_Test_Pos", "Mantoux_Test_Neg", "Total")
colnames(pop_1) = c("Tine_Test_Pos", "Tine_Test_Neg", "Total")
pop_1[1,1] = 14
pop_1[1,2] = 4
pop_1[2,1] = 9
pop_1[2,2] = 528
#Total rows and columns
pop_1[1,3] = pop_1[1,1] + pop_1[1,2]
pop_1[2,3] = pop_1[2,1] + pop_1[2,2]
pop_1[3,1] = pop_1[1,1] + pop_1[2,1]
pop_1[3,2] = pop_1[1,2] + pop_1[2,2]
N_1 = sum(pop_1[1,1] + pop_1[1,2] + pop_1[2,1] + pop_1[2,2])
pop_1[3,3] = N_1
pop_1
```
pop_1 = matrix(nrow=3,ncol=3)
rownames(pop_1) = c("Mantoux_Test_Pos", "Mantoux_Test_Neg", "Total")
colnames(pop_1) = c("Tine_Test_Pos", "Tine_Test_Neg", "Total")
pop_1[1,1] = 14
pop_1[1,2] = 4
pop_1[2,1] = 9
pop_1[2,2] = 528
#Total rows and columns
pop_1[1,3] = pop_1[1,1] + pop_1[1,2]
pop_1[2,3] = pop_1[2,1] + pop_1[2,2]
pop_1[3,1] = pop_1[1,1] + pop_1[2,1]
pop_1[3,2] = pop_1[1,2] + pop_1[2,2]
N_1 = sum(pop_1[1,1] + pop_1[1,2] + pop_1[2,1] + pop_1[2,2])
pop_1[3,3] = N_1
pop_1
pop_2 = matrix(nrow=3,ncol=3)
rownames(pop_2) = c("Mantoux_Test_Pos", "Mantoux_Test_Neg", "Total")
colnames(pop_2) = c("Tine_Test_Pos", "Tine_Test_Neg", "Total")
pop_2[1,1] = 887
pop_2[1,2] = 31
pop_2[2,1] = 37
pop_2[2,2] = 367
#Total rows and columns
pop_2[1,3] = pop_2[1,1] + pop_2[1,2]
pop_2[2,3] = pop_2[2,1] + pop_2[2,2]
pop_2[3,1] = pop_2[1,1] + pop_2[2,1]
pop_2[3,2] = pop_2[1,2] + pop_2[2,2]
N_2 = sum(pop_2[1,1] + pop_2[1,2] + pop_2[2,1] + pop_2[2,2])
pop_2[3,3] = N_2
pop_2
hw_definition <- c("model{
Population_1 ~ dmulti(prob_1, N_1)
Population_2 ~ dmulti(prob_2, N_2)
#Population_1
# Test1+ Test2+
prob_1[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_1[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_1[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_1[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[2] * ((se[1])*(se[2]))) + ((1-prev[2]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[2] * ((se[1])*(1-se[2]))) + ((1-prev[2]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[2] * ((1-se[1])*(se[2]))) + ((1-prev[2]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[2] * ((1-se[1])*(1-se[2]))) + ((1-prev[2]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
prev[2] ~ dbeta(1, 1)
#se[1] ~ dbeta(1, 1)I(1-sp[1], )
#sp[1] ~ dbeta(1, 1)
se[1] <- 1
sp[1] <-1
se[2] ~ dbeta(1, 1)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_1, Population_2, N_1, N_2
#monitor# prev, prob_1, prob_2, se, sp
#inits# prev, se, sp
}
")
Population_1 <- as.numeric(pop_1[1:2,1:2])
Population_2 <- as.numeric(pop_2[1:2,1:2])
prev <- list(chain1=c(0.05,0.99), chain2=c(0.95,0.05))
se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags(hw_definition, n.chains=2)
hw_definition <- c("model{
Population_1 ~ dmulti(prob_1, N_1)
Population_2 ~ dmulti(prob_2, N_2)
#Population_1
# Test1+ Test2+
prob_1[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_1[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_1[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_1[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[2] * ((se[1])*(se[2]))) + ((1-prev[2]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[2] * ((se[1])*(1-se[2]))) + ((1-prev[2]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[2] * ((1-se[1])*(se[2]))) + ((1-prev[2]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[2] * ((1-se[1])*(1-se[2]))) + ((1-prev[2]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
prev[2] ~ dbeta(1, 1)
#se[1] ~ dbeta(1, 1)I(1-sp[1], )
#sp[1] ~ dbeta(1, 1)
se[1] <- 1
sp[1] <-1
se[2] ~ dbeta(1, 1)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_1, Population_2, N_1, N_2
#monitor# prev, prob_1, prob_2, se, sp
}
")
library('runjags')
Population_1 <- as.numeric(pop_1[1:2,1:2])
Population_2 <- as.numeric(pop_2[1:2,1:2])
#prev <- list(chain1=c(0.05,0.99), chain2=c(0.95,0.05))
#se <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
#sp <- list(chain1=c(0.5,0.99), chain2=c(0.99,0.5))
results <- run.jags(hw_definition, n.chains=2)
summary(results)
?run.jags
View(results)
curve(dbeta(x,5,1))
curve(dbeta(x,50000,1))
curve(dbeta(x,5,1))
curve(dbeta(x,1.6,1.16))
hw_definition <- c("model{
Population_1 ~ dmulti(prob_1, N_1)
Population_2 ~ dmulti(prob_2, N_2)
#Population_1
# Test1+ Test2+
prob_1[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_1[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_1[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_1[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[2] * ((se[1])*(se[2]))) + ((1-prev[2]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[2] * ((se[1])*(1-se[2]))) + ((1-prev[2]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[2] * ((1-se[1])*(se[2]))) + ((1-prev[2]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[2] * ((1-se[1])*(1-se[2]))) + ((1-prev[2]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
prev[2] ~ dbeta(1, 1)
se[1] ~ dbeta(5, 1)I(1-sp[1], )
sp[1] ~ dbeta(5, 1)
se[2] ~ dbeta(1.6, 1.2)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_1, Population_2, N_1, N_2
#monitor# prev, prob_1, prob_2, se, sp
}
")
library('runjags')
Population_1 <- as.numeric(pop_1[1:2,1:2])
Population_2 <- as.numeric(pop_2[1:2,1:2])
results <- run.jags(hw_definition, n.chains=2)
summary(results)
hw_definition <- c("model{
Population_2 ~ dmulti(prob_2, N_2)
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
se[1] ~ dbeta(5, 1)I(1-sp[1], )
sp[1] ~ dbeta(5, 1)
se[2] ~ dbeta(1.6, 1.2)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_1, Population_2, N_1, N_2
#monitor# prob_2, se, sp
}
")
Population_2 <- as.numeric(pop_2[1:2,1:2])
results <- run.jags(hw_definition, n.chains=2)
hw_definition <- c("model{
Population_2 ~ dmulti(prob_2, N_2)
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
se[1] ~ dbeta(5, 1)I(1-sp[1], )
sp[1] ~ dbeta(5, 1)
se[2] ~ dbeta(1.6, 1.2)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_2,  N_2
#monitor# prob_2, se, sp
}
")
results <- run.jags(hw_definition, n.chains=2)
summary(results)
plot(results)
hw_definition <- c("model{
Population_2 ~ dmulti(prob_2, N_2)
#Population_2
# Test1+ Test2+
prob_2[1] <- (prev[1] * ((se[1])*(se[2]))) + ((1-prev[1]) * ((1-sp[1])*(1-sp[2])))
# Test1+ Test2-
prob_2[2] <- (prev[1] * ((se[1])*(1-se[2]))) + ((1-prev[1]) * ((1-sp[1])*(sp[2])))
# Test1- Test2+
prob_2[3] <- (prev[1] * ((1-se[1])*(se[2]))) + ((1-prev[1]) * ((sp[1])*(1-sp[2])))
# Test1- Test2-
prob_2[4] <- (prev[1] * ((1-se[1])*(1-se[2]))) + ((1-prev[1]) * ((sp[1])*(sp[2])))
prev[1] ~ dbeta(1, 1)
se[1] ~ dbeta(1, 1)I(1-sp[1], )
sp[1] ~ dbeta(1, 1)
se[2] ~ dbeta(1, 1)I(1-sp[2], )
sp[2] ~ dbeta(1, 1)
#data# Population_2,  N_2
#monitor# prob_2, se, sp
}
")
Population_2 <- as.numeric(pop_2[1:2,1:2])
results <- run.jags(hw_definition, n.chains=2)
summary(results)
plot(results)
View(summary(results))
load("Cont.Rdata")
hist(S, breaks = 20)
abline(v=-1.8, col = "green")
abline(v=-1, col = "red")
continuous_test <- "model {
for (i in 1:481) {
#S[i] diagnostic test value for ith individual
S[i] ~ dnorm(mu[i],tau[i])
#Value of mu & tau depending on the group (diseased or disease-free)
mu[i] <- lambda[T[i]]
tau[i] <- gamma[T[i]]
#dcat <- categorical #D(-) if T[i]=1, D(+) if T[i]=2
T[i] ~ dcat(P[])
}
P[1:2] ~ ddirch(alpha[])
# lambda[1]-gamma[1] mean-precision of non-disease group
lambda[1] ~ dnorm(0,0.001)
lambda[2] ~ dnorm(0,0.001)T(lambda[1],)
gamma[1] ~ dgamma(0.001,0.001)
gamma[2] ~ dgamma(0.001,0.001)
# variance = 1/precision(tau)
sigma[1] <- 1/gamma[1]
sigma[2] <- 1/gamma[2]
# AUC
AUC <- phi(-(lambda[1]-lambda[2])/sqrt(sigma[2]+sigma[1]))
# ROC curve
for(i in 1:111) {
c1[i] <-  ((-3.1+0.04*i)-lambda[2])/sqrt(sigma[2]) # grid is from -3 to 0.84
se[i] <- 1-phi(c1[i])
c2[i] <-  ((-3.1+0.04*i)-lambda[1])/sqrt(sigma[1])
sp[i] <- phi(c2[i])
J[i] <- se[i] + sp[i] - 1
}
#data# alpha, S
#inits# lambda, gamma
#monitor# AUC, se, sp, P, lambda, gamma, sigma, se, sp, J
}
"
## Data - Initial Values
alpha <- c(1,1)
summary(S)
lambda <- list(chain1=c(-3, 0), chain2=c(-2,-2))
gamma <- list(chain1=c(10, 0.1), chain2=c(30, 5))
runjags.options(force.summary = TRUE)
# Load packages
library("runjags")
runjags.options(force.summary = TRUE)
results <- run.jags(continuous_test, n.chains = 2)
plot(results, vars=c('AUC', 'P', 'lambda', 'gamma', 'sigma'))
cut_off = summary(results)
se_est <- combine.mcmc(results, vars='se')
sp_est <- combine.mcmc(results, vars='sp')
ses_mu <- apply(se_est, 2, mean)
sps_mu <- apply(sp_est, 2, mean)
par(mfrow=c(1,1))
plot((1-sps_mu), ses_mu, type="l", col="darkblue", xlab = "1-Sp", ylab = "Se")
auc_est <- combine.mcmc(results, vars='AUC')
hist(auc_est, breaks=50, col="orange", main="AUC")
lambda_est <- combine.mcmc(results, vars='lambda')
boxplot(as.matrix(lambda_est), col="red")
# - Try and find the cut-off value that maximizes Youden's index?
cut_off <- data.frame(cut_off)
cut_off$Index = rownames(cut_off)
which.max(cut_off[grepl("J", cut_off[,"Index"]),]$Median) # 21
cut_off_opt = -3.1+0.04*21
hist(S, breaks = 20)
abline(v=cut_off_opt, col = "green")
cut_off[grepl("se", cut_off$Index),]$Median[21]
cut_off[grepl("sp", cut_off$Index),]$Median[21]
load("~/Documents/GitHub/harmony_larissa_2024/training_material/Cont.Rdata")
hist(S, breaks = 20)
abline(v=-1.8, col = "green")
abline(v=-1, col = "red")
(1 - (-3.1))/111
continuous_test <- "model {
for (i in 1:481) {
#S[i] diagnostic test value for ith individual
S[i] ~ dnorm(mu[i],tau[i])
#Value of mu & tau depending on the group (diseased or disease-free)
mu[i] <- lambda[T[i]]
tau[i] <- gamma[T[i]]
#dcat <- categorical #D(-) if T[i]=1, D(+) if T[i]=2
T[i] ~ dcat(P[])
}
P[1:2] ~ ddirch(alpha[]) # P[2] ~ dbeta(1,1) , P[1] <- 1 - P[2]
# lambda[1]-gamma[1] mean-precision of non-disease group
lambda[1] ~ dnorm(0,0.001)
lambda[2] ~ dnorm(0,0.001)T(lambda[1],)
gamma[1] ~ dgamma(0.001,0.001)
gamma[2] ~ dgamma(0.001,0.001)
# variance = 1/precision(tau)
sigma[1] <- 1/gamma[1]
sigma[2] <- 1/gamma[2]
# AUC
AUC <- phi(-(lambda[1]-lambda[2])/sqrt(sigma[2]+sigma[1]))
# ROC curve
for(i in 1:111) {
c1[i] <-  ((-3.1+0.04*i)-lambda[2])/sqrt(sigma[2]) # grid is from -3 to 0.84
se[i] <- 1-phi(c1[i])
c2[i] <-  ((-3.1+0.04*i)-lambda[1])/sqrt(sigma[1])
sp[i] <- phi(c2[i])
J[i] <- se[i] + sp[i] - 1
}
#data# alpha, S
#inits# lambda, gamma
#monitor# AUC, se, sp, P, lambda, gamma, sigma, se, sp, J
}
"
## Data - Initial Values
alpha <- c(1,1)
lambda <- list(chain1=c(-3, 0), chain2=c(-2,-2))
gamma <- list(chain1=c(10, 0.1), chain2=c(30, 5))
runjags.options(force.summary = TRUE)
results <- run.jags(continuous_test, n.chains = 2)
plot(results, vars=c('AUC', 'P', 'lambda', 'gamma', 'sigma'))
cut_off = summary(results)
se_est <- combine.mcmc(results, vars='se')
sp_est <- combine.mcmc(results, vars='sp')
ses_mu <- apply(se_est, 2, mean)
sps_mu <- apply(sp_est, 2, mean)
par(mfrow=c(1,1))
plot((1-sps_mu), ses_mu, type="l", col="darkblue", xlab = "1-Sp", ylab = "Se")
se_est <- combine.mcmc(results, vars='se')
sp_est <- combine.mcmc(results, vars='sp')
ses_mu <- apply(se_est, 2, mean)
sps_mu <- apply(sp_est, 2, mean)
par(mfrow=c(1,1))
plot((1-sps_mu), ses_mu, type="l", col="darkblue", xlab = "1-Sp", ylab = "Se")
auc_est <- combine.mcmc(results, vars='AUC')
hist(auc_est, breaks=50, col="orange", main="AUC")
View(summary(results))
cut_off[grepl("se", cut_off$Index),]$Median[21]
# - Try and find the cut-off value that maximizes Youden's index?
cut_off <- data.frame(cut_off)
cut_off$Index = rownames(cut_off)
which.max(cut_off[grepl("J", cut_off[,"Index"]),]$Median) # 21
cut_off_opt = -3.1+0.04*21
hist(S, breaks = 20)
abline(v=cut_off_opt, col = "green")
cut_off[grepl("se", cut_off$Index),]$Median[21]
cut_off[grepl("sp", cut_off$Index),]$Median[21]
