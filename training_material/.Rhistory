mcmc_ap <- as.mcmc.list(results)
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
plot(df_ap$ap1)
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
# Plotting the overlay
ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1 and ap2",
x = "Prevalence Estimate",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +  # Color customization
theme_minimal()
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
# Plotting the overlay
ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1 and ap2",
x = "Prevalence Estimate",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +  # Color customization
theme_minimal()
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
# Plotting the overlay
p<-ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1 and ap2",
x = "Prevalence Estimate",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +  # Color customization
theme_minimal()
print(p)
ap_model <-
'model {
# Define likelihood distribution of the data
# JAGS Binomial distribution Arguments: p, n
y1 ~ dbin(ap1,n1)
y2 ~ dbin(ap2,n2)
# Specify prior distribution for par of interest
# Uniform (non-informative) prior distribution
ap1 ~ dbeta(1, 1)
ap2 ~ dbeta(1, 1)
#data# n1, y1, n2, y2
#monitor# ap1, ap2
#inits# ap1
}
'
# Call JAGS
library(runjags)
# Provide Data
n1 = 4000
y1 = 1200
n2 = 40
y2 = 12
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
# Plotting the overlay
p<-ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1 and ap2",
x = "Prevalence Estimate",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +  # Color customization
theme_minimal()
print(p)
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
# Plotting the overlay
p<-ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1 and ap2",
x = "Prevalence Estimate",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +  # Color customization+
geom_line(rbeta(10000,1,1))+
theme_minimal()
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
# Plotting the overlay
p<-ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1 and ap2",
x = "Prevalence Estimate",
y = "Density") +
scale_fill_manual(values = c("blue", "red")) +  # Color customization+
geom_histogram(rbeta(10000,1,1))+
theme_minimal()
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
library(ggplot2)
# Assuming df_long is already created and contains the parameters 'ap1' and 'ap2' in long format
# Generate a sample from a beta distribution
beta_data <- data.frame(value = rbeta(10000, 1, 1))
beta_data$parameter <- "Beta Distribution"
# Combine this with your existing data
df_long <- rbind(df_long, beta_data)
# Plotting
p <- ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6, adjust = 1) +  # Adjust can be tweaked for smoother curves
scale_fill_manual(values = c(ap1 = "blue", ap2 = "red", `Beta Distribution` = "green")) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1, ap2, and Beta Distribution",
x = "Prevalence Estimate",
y = "Density") +
theme_minimal()
# Print the plot
print(p)
ap_model <-
'model {
# Define likelihood distribution of the data
# JAGS Binomial distribution Arguments: p, n
y1 ~ dbin(ap1,n1)
y2 ~ dbin(ap2,n2)
# Specify prior distribution for par of interest
# Uniform (non-informative) prior distribution
ap1 ~ dbeta(1, 1)
ap2 ~ dbeta(1, 1)
#data# n1, y1, n2, y2
#monitor# ap1, ap2
#inits# ap1
}
'
# Call JAGS
library(runjags)
# Provide Data
n1 = 4000
y1 = 1200
n2 = 40
y2 = 12
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
library(ggplot2)
# Assuming df_long is already created and contains the parameters 'ap1' and 'ap2' in long format
# Generate a sample from a beta distribution
beta_data <- data.frame(value = rbeta(10000, 1, 1))
beta_data$parameter <- "Beta Distribution"
# Combine this with your existing data
df_long <- rbind(df_long, beta_data)
# Plotting
p <- ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6, adjust = 1) +  # Adjust can be tweaked for smoother curves
scale_fill_manual(values = c(ap1 = "blue", ap2 = "red", `Beta Distribution` = "green")) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1, ap2, and Beta Distribution",
x = "Prevalence Estimate",
y = "Density") +
theme_minimal()
# Print the plot
print(p)
ap_model <-
'model {
# Define likelihood distribution of the data
# JAGS Binomial distribution Arguments: p, n
y1 ~ dbin(ap1,n1)
y2 ~ dbin(ap2,n2)
# Specify prior distribution for par of interest
# Uniform (non-informative) prior distribution
ap1 ~ dbeta(1, 100)
ap2 ~ dbeta(1, 100)
#data# n1, y1, n2, y2
#monitor# ap1, ap2
#inits# ap1
}
'
# Call JAGS
library(runjags)
# Provide Data
n1 = 4000
y1 = 1200
n2 = 40
y2 = 12
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
library(ggplot2)
# Assuming df_long is already created and contains the parameters 'ap1' and 'ap2' in long format
# Generate a sample from a beta distribution
beta_data <- data.frame(value = rbeta(10000, 1, 1))
beta_data$parameter <- "Beta Distribution"
# Combine this with your existing data
df_long <- rbind(df_long, beta_data)
# Plotting
p <- ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6, adjust = 1) +  # Adjust can be tweaked for smoother curves
scale_fill_manual(values = c(ap1 = "blue", ap2 = "red", `Beta Distribution` = "green")) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1, ap2, and Beta Distribution",
x = "Prevalence Estimate",
y = "Density") +
theme_minimal()
# Print the plot
print(p)
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
library(ggplot2)
# Assuming df_long is already created and contains the parameters 'ap1' and 'ap2' in long format
# Generate a sample from a beta distribution
beta_data <- data.frame(value = rbeta(10000, 1, 100))
beta_data$parameter <- "Beta Distribution"
# Combine this with your existing data
df_long <- rbind(df_long, beta_data)
# Plotting
p <- ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6, adjust = 1) +  # Adjust can be tweaked for smoother curves
scale_fill_manual(values = c(ap1 = "blue", ap2 = "red", `Beta Distribution` = "green")) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1, ap2, and Beta Distribution",
x = "Prevalence Estimate",
y = "Density") +
theme_minimal()
# Print the plot
print(p)
ap_model <-
'model {
# Define likelihood distribution of the data
# JAGS Binomial distribution Arguments: p, n
y1 ~ dbin(ap1,n1)
y2 ~ dbin(ap2,n2)
# Specify prior distribution for par of interest
# Uniform (non-informative) prior distribution
ap1 ~ dbeta(1, 100000)
ap2 ~ dbeta(1, 100000)
#data# n1, y1, n2, y2
#monitor# ap1, ap2
#inits# ap1
}
'
# Call JAGS
library(runjags)
# Provide Data
n1 = 4000
y1 = 1200
n2 = 40
y2 = 12
# Initial values for par of interest
ap1 <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(ap_model, n.chains=1,
burnin=5000, sample=10000)
# View results
# Plot results
plot(results)
# Print results
summary(results)
# Convert the results to 'mcmc.list' object
mcmc_ap <- as.mcmc.list(results)
# Convert 'mcmc.list' to data frame for ggplot
df_ap <- as.data.frame(as.mcmc(mcmc_ap))
library(ggplot2)
library(tidyr)  # For pivot_longer
# Assuming df_ap contains the columns for ap1 and ap2
# If your data frame isn't set up this way, adjust the data extraction part accordingly.
# Convert the dataframe to long format
df_long <- pivot_longer(df_ap, cols = c(ap1, ap2), names_to = "parameter", values_to = "value")
library(ggplot2)
# Assuming df_long is already created and contains the parameters 'ap1' and 'ap2' in long format
# Generate a sample from a beta distribution
beta_data <- data.frame(value = rbeta(10000, 1, 10000))
beta_data$parameter <- "Beta Distribution"
# Combine this with your existing data
df_long <- rbind(df_long, beta_data)
# Plotting
p <- ggplot(df_long, aes(x = value, fill = parameter)) +
geom_density(alpha = 0.6, adjust = 1) +  # Adjust can be tweaked for smoother curves
scale_fill_manual(values = c(ap1 = "blue", ap2 = "red", `Beta Distribution` = "green")) +
labs(title = "Overlay of Density Plots for Apparent Prevalences ap1, ap2, and Beta Distribution",
x = "Prevalence Estimate",
y = "Density") +
theme_minimal()
# Print the plot
print(p)
tp_model <-
'model {
y ~ dbin(ap,n)
ap <- tp*Se + (1-tp)*(1-Sp)
# Uniform (non-informative) prior distribution
tp ~ dbeta(1,1)
# Informative priors for Se and Sp
Se ~ dbeta(25.4, 3.4)
Sp ~ dbeta(95, 5)
#data# n, y
#monitor# tp, Se, Sp
#inits# tp, Se, Sp
}
'
curve(dbeta(x,25.4, 3.4))
tp_model <-
'model {
y ~ dbin(ap,n)
ap <- tp*Se + (1-tp)*(1-Sp)
# Uniform (non-informative) prior distribution
tp ~ dbeta(1,1)
# Informative priors for Se and Sp
Se ~ dbeta(1, 1)
Sp ~ dbeta(1, 1)
#data# n, y
#monitor# tp, Se, Sp
#inits# tp, Se, Sp
}
'
library(runjags)
# Provide Data
n = 4072
y = 1210
# Initial values for pars of interest
tp <- list(chain1=0.05, chain2=0.95)
Se <- list(chain1=0.05, chain2=0.95)
Sp <- list(chain1=0.05, chain2=0.95)
# Run the model
results <- run.jags(tp_model, n.chains=2,
burnin=5000, sample=10000)
# Print results
summary(results)
## View results
# Plot results
plot(results) # Click backwards to view all plots
tp_model <-
'model {
y ~ dbin(ap,n)
ap <- tp*Se + (1-tp)*(1-Sp)
# Uniform (non-informative) prior distribution
tp ~ dbeta(1,1)
# Informative priors for Se and Sp
Se ~ dbeta(25.4, 3.4)
Sp ~ dbeta(95, 5)
#data# n, y
#monitor# tp, Se, Sp
#inits# tp, Se, Sp
}
'
library(runjags)
# Provide Data
n = 40
y = 12
# Initial values for pars of interest
tp <- list(chain1=0.05, chain2=0.95)
Se <- list(chain1=0.05, chain2=0.95)
Sp <- list(chain1=0.05, chain2=0.95)
results <- run.jags(tp_model, n.chains=2,
burnin=5000, sample=10000)
# Print results
summary(results)
